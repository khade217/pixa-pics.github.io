/*! For license information please see chunk_48.min.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{1035:function(n,e,t){"use strict";t.d(e,"a",(function(){return i})),t.d(e,"b",(function(){return o}));class i{constructor(n,e=!1,t=null,i=!1,o=!1){this.variableNames=["x","W"],this.outputShape=n.outShape;const d=n.padInfo.top,a=n.padInfo.left,s=n.strideHeight,r=n.strideWidth,x=n.dilationHeight,l=n.dilationWidth,C=n.filterHeight,c=n.filterWidth,u=4*Math.floor(n.inChannels/4),f=n.inChannels%4,$="channelsLast"===n.dataFormat,h=$?1:2,y=$?2:3,w=$?3:1;let v="",R="";t&&(v=i?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`\n          float activation(float x) {\n            ${t}\n          }\n        `,R="result = activation(result);");const p=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${s}, ${r});\n      const ivec2 pads = ivec2(${d}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${w}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${h}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${C}; wR++) {\n          int xR = xRCorner + wR * ${x};\n\n          if (xR < 0 || xR >= ${n.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${c}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${n.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${u}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${$}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${$}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${u}) *\n                    getW(wR, wC, ${u}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${u}, xR, xC) *\n                    getW(wR, wC, ${u}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${u}, d2),\n                getW(wR, wC, ${u} + 1, d2)\n              );\n\n              if (${$}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${u}),\n                  getX(batch, xR, xC, ${u} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${u}, xR, xC),\n                  getX(batch, ${u} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${u}, d2),\n                getW(wR, wC, ${u} + 1, d2),\n                getW(wR, wC, ${u} + 2, d2)\n              );\n\n              if (${$}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${u}),\n                  getX(batch, xR, xC, ${u} + 1),\n                  getX(batch, xR, xC, ${u} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${u}, xR, xC),\n                  getX(batch, ${u} + 1, xR, xC),\n                  getX(batch, ${u} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${p}\n        ${R}\n        setOutput(result);\n      }\n    `}}class o{constructor(n){this.variableNames=["x","W"],this.outputShape=n.outShape;const e=n.padInfo.front,t=n.padInfo.top,i=n.padInfo.left,o=n.strideDepth,d=n.strideHeight,a=n.strideWidth,s=n.dilationDepth,r=n.dilationHeight,x=n.dilationWidth,l=n.filterDepth,C=n.filterHeight,c=n.filterWidth,u=4*Math.floor(n.inChannels/4),f=n.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${d}, ${a});\n      const ivec3 pads = ivec3(${e}, ${t}, ${i});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${l}; wF++) {\n          int xF = xFCorner + wF * ${s};\n\n          if (xF < 0 || xF >= ${n.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${C}; wR++) {\n            int xR = xRCorner + wR * ${r};\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${c}; wC++) {\n              int xC = xCCorner + wC * ${x};\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${u}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${u}) *\n                  getW(wF, wR, wC, ${u}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${u}),\n                  getX(batch, xF, xR, xC, ${u} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${u}, d2),\n                  getW(wF, wR, wC, ${u} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${u}),\n                  getX(batch, xF, xR, xC, ${u} + 1),\n                  getX(batch, xF, xR, xC, ${u} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${u}, d2),\n                  getW(wF, wR, wC, ${u} + 1, d2),\n                  getW(wF, wR, wC, ${u} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}},1036:function(n,e,t){"use strict";function i(n,e,t){if(1===n)return""+e;if(2===n)return`${e}.x, ${e}.y`;if(3===n)return`${e}.x, ${e}.y, ${e}.z`;if(4===n)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative ${t} for rank ${n} is not yet supported`)}function o(n,e,t){if(1===n)return""+e;if(2===n)return e+".y";if(3===n)return e+".z";if(4===n)return e+".w";throw Error(`Cumulative ${t} for rank ${n} is not yet supported`)}var d,a;t.d(e,"a",(function(){return a})),t.d(e,"b",(function(){return s})),d=t(651),function(n){n.Prod="*",n.Sum="+"}(a||(a={}));class s{constructor(n,e,t,s){this.op=n,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,x=this.op===a.Prod?"1.0":"0.0",l=t?x:`getX(${i(r,"coords",this.op)})`,C=this.outputShape[this.outputShape.length-1];let c="",u="";t?(c=s?"end != "+(C-1):"end != 0",u=s?"end + 1":"end - 1"):(c=s?"end + pow2 < "+C:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Object(d.a)(r)} coords = getOutputCoords();\n        int end = ${o(r,"coords",this.op)};\n        float val = ${l};\n        int pow2 = int(pow(2.0, index));\n        if (${c}) {\n          int idx = ${u};\n          ${o(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${i(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}},1237:function(n,e,t){"use strict";var i,o;t.d(e,"a",(function(){return d})),i=t(616),o=t(665);class d{constructor(n,e=!1,t=null,d=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=n.outShape,this.enableShapeUniforms=Object(o.e)(this.outputShape.length);const s=n.padInfo.left,r=n.strideWidth,x=n.dilationWidth,l=n.filterHeight,C=n.filterWidth,c=C;let u="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let i=0;i<C;i++)u+=`\n           vec4 xTexelC${2*i};\n           int xTexelC${2*i}Ready;\n           vec4 xTexelC${2*i+1};\n           int xTexelC${2*i+1}Ready;\n           vec4 xC${i};`;u+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${n.inChannels}; d1 += 2) {\n       `;for(let i=0;i<C;i++)u+=`\n           xTexelC${2*i} = vec4(0.0);\n           xTexelC${2*i}Ready = 0;\n           xTexelC${2*i+1} = vec4(0.0);\n           xTexelC${2*i+1}Ready = 0;\n           xC${i} = vec4(0.0);`;u+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let o=0;o<(c+1)/2;o++){const e=2*o;if(u+=`\n           xC = xCCorner + ${e*x};\n           `,1===r){if(e<C&&(s%2==1?(u+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                   xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${e}.zw = vec2(0.0);\n                   }\n                   xTexelC${e}Ready = 1;\n                 }\n               `,u+=1===x&&e>0?`\n                 xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                   } else {\n                     xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                   }\n                   `):u+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                   xTexelC${e} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${e}.zw = vec2(0.0);\n                   }\n                   xTexelC${e}Ready = 1;\n                 }\n\n                 xC${e} = xTexelC${e};\n                 `,e+1<C)){const n=s%2==0?i.Si.nearestLargerEven(x):x;x%2==0&&s%2==1||x%2!=0&&s%2!=1?(u+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${n};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                     xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${e+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${e+1}Ready = 1;\n                   }\n                   `,u+=x>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${e+1} = vec4(previous.zw, xTexelC${e+1}.xy);\n                     } else {\n                      xC${e+1} = vec4(0.0, 0.0, xTexelC${e+1}.xy);\n                     }\n                     `:`\n                     xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                     `):u+=1===n?`\n                     xC${e+1} = xTexelC${e};\n                     `:`\n                     xCOffset = xC + ${n};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                       xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${e+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${e+1}Ready = 1;\n                     }\n\n                     xC${e+1} = xTexelC${e+1};\n                     `}}else e<C&&(s%2==1?(u+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                   xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${e}.zw = vec2(0.0);\n                   }\n                   xTexelC${e}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                   xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${e+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${e+1}Ready = 1;\n                 }\n\n                 xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n               `,e+1<C&&(u+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                 `)):(u+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                   xTexelC${e} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${e}.zw = vec2(0.0);\n                   }\n                   xTexelC${e}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                   xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${e+1}.zw = vec2(0.);\n                   }\n                   xTexelC${e+1}Ready = 1;\n                 }\n\n                 xC${e} = vec4(\n                   xTexelC${e}.xy, xTexelC${e+1}.xy);\n               `,e+1<C&&(u+=`\n                   xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                 `)));e<C&&(u+=`\n             wTexel = getW(r, ${e}, d1, d2);\n             dotProd += xC${e}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${n.inChannels}) {\n               dotProd += xC${e}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,e+1<C&&(u+=`\n               wTexel = getW(r, ${e+1}, d1, d2);\n               dotProd += xC${e+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${n.inChannels}) {\n                 dotProd += xC${e+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}u+="\n     }\n   ",u+="\n     }\n   ",u+="\n     }\n   ";let f="",$="";t&&(f=d?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${t}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${t}\n         }`:`vec4 activation(vec4 x) {\n           ${t}\n         }`,$="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${f}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${u}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${h}\n         ${$}\n         setOutput(result);\n       }\n     `}}},1239:function(n,e,t){"use strict";var i,o;t.d(e,"a",(function(){return d})),i=t(616),o=t(665);class d{constructor(n,e=!1,t=null,d=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=n.outShape,this.enableShapeUniforms=Object(o.e)(this.outputShape.length);const s=n.outChannels/n.inChannels,r=n.padInfo.left,x=n.strideWidth,l=n.dilationWidth,C=n.filterHeight,c=n.filterWidth,u=c;let f="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let i=0;i<c;i++)f+=`\n          vec4 xTexelC${2*i};\n          int xTexelC${2*i}Ready;\n          vec4 xTexelC${2*i+1};\n          int xTexelC${2*i+1}Ready;\n          vec4 xC${i};`;f+=`\n    for (int r = 0; r < ${C}; r++) {\n      `;for(let i=0;i<c;i++)f+=`\n          xTexelC${2*i} = vec4(0.0);\n          xTexelC${2*i}Ready = 0;\n          xTexelC${2*i+1} = vec4(0.0);\n          xTexelC${2*i+1}Ready = 0;\n          xC${i} = vec4(0.0);`;f+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let o=0;o<(u+1)/2;o++){const n=2*o;if(f+=`\n          xC = xCCorner + ${n*l};\n          `,1===x){if(n<c&&(r%2==1?(f+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n              `,f+=1===l&&n>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):f+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xC${n} = xTexelC${n};\n                `,n+1<c)){const e=r%2==0?i.Si.nearestLargerEven(l):l;l%2==0&&r%2==1||l%2!=0&&r%2!=1?(f+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${n+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${n+1}Ready = 1;\n                  }\n                  `,f+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                    } else {\n                     xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                    }\n                    `:`\n                    xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                    `):f+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${n+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${n+1}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${n+1};\n                    `}}else n<c&&(r%2==1?(f+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n              `,n+1<c&&(f+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                `)):(f+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\n              `,n+1<c&&(f+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                `)));n<c&&(f+=`\n            wTexel = getW(r, ${n}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,n+1<c&&(f+=`\n              wTexel = getW(r, ${n+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}f+="\n    }\n  ",f+="\n      }\n    ";let $="",h="";t&&($=d?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`vec4 activation(vec4 x) {\n          ${t}\n        }`,h="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${$}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${s};\n        int q = d2 - d1 * ${s};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${f}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${y}\n        ${h}\n        setOutput(result);\n      }\n    `}}},1240:function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));var i=t(665);class o{constructor(n,e=!1,t=null,o=!1,d=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=n.outShape,this.enableShapeUniforms=Object(i.e)(this.outputShape.length);const a=n.filterHeight,s=n.filterWidth,r=n.outChannels/n.inChannels;let x="",l="";t&&(x=o?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:d?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`\n          float activation(float x) {\n            ${t}\n          }\n        `,l="result = activation(result);");const C=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),d&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${r};\n        int q = d2 - d1 * ${r};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${C}\n        ${l}\n        setOutput(result);\n      }\n    `}}},1241:function(n,e,t){"use strict";t.d(e,"a",(function(){return i})),t.d(e,"b",(function(){return o}));class i{constructor(n){this.variableNames=["x","dy"],this.outputShape=n.filterShape;const e=n.strideHeight,t=n.strideWidth,i=n.padInfo.top,o=n.padInfo.left,d=n.outChannels/n.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${d} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${n.batchSize}; b++) {\n          for (int yR = 0; yR < ${n.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${i};\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${n.outWidth}; yC++) {\n              int xC = wC + yC * ${t} - ${o};\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class o{constructor(n){this.variableNames=["dy","W"],this.outputShape=n.inShape;const e=n.filterHeight,t=n.filterWidth,i=n.strideHeight,o=n.strideWidth,d=e-1-n.padInfo.top,a=t-1-n.padInfo.left,s=n.outChannels/n.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${d}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${i}.0;\n\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${t} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${s}; dm++) {\n              int d2 = d1 * ${s} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}},1980:function(n,e,t){"use strict";function i(n,e,t){const i=n.indexOf(e);return n.map(((n,e)=>e===i?`${n} - ${t}`:n)).join()}var o,d,a;t.d(e,"a",(function(){return s})),o=t(616),d=t(698),a=t(651);class s{constructor(n,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=o.ie.computeOutShape(n,e);const t=this.outputShape,s=t.length,r=Object(a.a)(s),x=Object(d.a)("coords",s),l=["x","y","z","w","u","v"].slice(0,s);this.variableNames=n.map(((n,e)=>"T"+e));const C=Array(n.length-1);C[0]=n[0][e];for(let i=1;i<C.length;i++)C[i]=C[i-1]+n[i][e];const c=l[e],u=l.slice(-2),f=l.join();let $=`if (${c} < ${C[0]}) {\n        return getChannel(\n            getT0(${f}), vec2(${u.join()}));\n        }`;for(let o=1;o<C.length;o++){const n=C[o-1];$+=`\n        if (${c} < ${C[o]}  && ${c} >= ${C[o-1]}) {\n          return getChannel(\n            getT${o}(${i(l,c,n)}),\n            vec2(${i(u,c,n)}));\n        }`}const h=C.length,y=C[C.length-1];$+=`\n        return getChannel(\n          getT${h}(${i(l,c,y)}),\n          vec2(${i(u,c,y)}));`,this.userCode=`\n      float getValue(${l.map((n=>"int "+n))}) {\n        ${$}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${x}), 0., 0., 0.);\n\n        ${x[s-1]} = ${x[s-1]} + 1;\n        if (${x[s-1]} < ${t[s-1]}) {\n          result.g = getValue(${x});\n        }\n\n        ${x[s-2]} = ${x[s-2]} + 1;\n        if (${x[s-2]} < ${t[s-2]}) {\n          result.a = getValue(${x});\n        }\n\n        ${x[s-1]} = ${x[s-1]} - 1;\n        if (${x[s-2]} < ${t[s-2]} &&\n            ${x[s-1]} < ${t[s-1]}) {\n          result.b = getValue(${x});\n        }\n        setOutput(result);\n      }\n    `}}},1981:function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));var i=t(616);class o{constructor(n){this.outputShape=[],this.outputShape=i.ie.computeOutShape(n,1),this.variableNames=n.map(((n,e)=>"T"+e));const e=Array(n.length-1);e[0]=n[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+n[i][1];const t=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){const n=e[i-1];t.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${n}));`)}const o=e.length,d=e[e.length-1];t.push(`else setOutput(getT${o}(yR, yC-${d}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${t.join("\n        ")}\n      }\n    `}}},1986:function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));var i=t(665);class o{constructor(n){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=n.inShape,this.enableShapeUniforms=Object(i.e)(this.outputShape.length);const e=n.filterHeight,t=n.filterWidth,o=e-1-n.padInfo.top,d=t-1-n.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            int wCPerm = ${t} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${n.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${n.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${n.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${n.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${n.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}},1993:function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));class i{constructor(n,e,t,i,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[d,a,s,r]=n,[x]=e,[l,C]=t;this.outputShape=[x,l,C,r];const c="bilinear"===i?1:0,[u,f]=[a-1+".0",s-1+".0"],[$,h,y]=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio",`y1*${u} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+u],[w,v,R]=C>1?[""+(s-1)/(C-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${$});\n      const float width_ratio = float(${w});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${d}) {\n          return;\n        }\n\n        float height_scale = ${h};\n        float width_scale = ${v};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${u} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${R};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${c} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}},898:function(n,e,t){"use strict";t.d(e,"a",(function(){return i})),t.d(e,"b",(function(){return o})),t.d(e,"c",(function(){return d})),t.d(e,"d",(function(){return a}));class i{constructor(n){this.variableNames=["x","dy"],this.outputShape=n.filterShape;const e=n.strideHeight,t=n.strideWidth,i=n.padInfo.top,o=n.padInfo.left,d="channelsLast"===n.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${n.batchSize}; b++) {\n          for (int yR = 0; yR < ${n.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${i};\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${n.outWidth}; yC++) {\n              int xC = wC + yC * ${t} - ${o};\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              ${d?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class o{constructor(n){this.variableNames=["dy","W"],this.outputShape=n.inShape;const e=n.filterHeight,t=n.filterWidth,i=n.strideHeight,o=n.strideWidth,d="channelsLast"===n.dataFormat,a=e-1-n.padInfo.top,s=t-1-n.padInfo.left,r=d?1:2,x=d?2:3,l=d?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${l}];\n\n        ivec2 dyCorner = ivec2(coords[${r}], coords[${x}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${i}.0;\n\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${t} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${n.outChannels}; d2++) {\n\n              if (${d}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class d{constructor(n){this.variableNames=["x","dy"],this.outputShape=n.filterShape;const e=n.strideDepth,t=n.strideHeight,i=n.strideWidth,o=n.padInfo.front,d=n.padInfo.top,a=n.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${n.batchSize}; b++) {\n          for (int yF = 0; yF < ${n.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${o};\n\n            if (xF < 0 || xF >= ${n.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${n.outHeight}; yR++) {\n              int xR = wR + yR * ${t} - ${d};\n\n              if (xR < 0 || xR >= ${n.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${n.outWidth}; yC++) {\n                int xC = wC + yC * ${i} - ${a};\n\n                if (xC < 0 || xC >= ${n.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class a{constructor(n){this.variableNames=["dy","W"],this.outputShape=n.inShape;const e=n.filterDepth,t=n.filterHeight,i=n.filterWidth,o=n.strideDepth,d=n.strideHeight,a=n.strideWidth,s=e-1-n.padInfo.front,r=t-1-n.padInfo.top,x=i-1-n.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${s}, ${r}, ${x});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${n.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${t}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${d}.0;\n\n            if (dyR < 0.0 || dyR >= ${n.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${t} - 1 - wR;\n\n            for (int wC = 0; wC < ${i}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${i} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${n.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}}}]);